/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TestLoaderErrorImport } from './routes/test-loader-error'
import { Route as TestErrorImport } from './routes/test-error'
import { Route as TestAsyncErrorImport } from './routes/test-async-error'
import { Route as OnboardingImport } from './routes/onboarding'
import { Route as ErrorTestingImport } from './routes/error-testing'
import { Route as AuthLayoutImport } from './routes/_authLayout'
import { Route as DashboardRouteImport } from './routes/dashboard/route'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as AuthLayoutRegisterImport } from './routes/_authLayout/register'
import { Route as AuthLayoutLoginImport } from './routes/_authLayout/login'
import { Route as DashboardSettingsRouteImport } from './routes/dashboard/settings/route'
import { Route as DashboardOverviewRouteImport } from './routes/dashboard/overview/route'

// Create Virtual Routes

const TestComponentIndexLazyImport = createFileRoute('/test-component/')()
const DashboardTransactionsRouteLazyImport = createFileRoute(
  '/dashboard/transactions',
)()

// Create/Update Routes

const TestLoaderErrorRoute = TestLoaderErrorImport.update({
  id: '/test-loader-error',
  path: '/test-loader-error',
  getParentRoute: () => rootRoute,
} as any)

const TestErrorRoute = TestErrorImport.update({
  id: '/test-error',
  path: '/test-error',
  getParentRoute: () => rootRoute,
} as any)

const TestAsyncErrorRoute = TestAsyncErrorImport.update({
  id: '/test-async-error',
  path: '/test-async-error',
  getParentRoute: () => rootRoute,
} as any)

const OnboardingRoute = OnboardingImport.update({
  id: '/onboarding',
  path: '/onboarding',
  getParentRoute: () => rootRoute,
} as any)

const ErrorTestingRoute = ErrorTestingImport.update({
  id: '/error-testing',
  path: '/error-testing',
  getParentRoute: () => rootRoute,
} as any)

const AuthLayoutRoute = AuthLayoutImport.update({
  id: '/_authLayout',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRouteRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const TestComponentIndexLazyRoute = TestComponentIndexLazyImport.update({
  id: '/test-component/',
  path: '/test-component/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/test-component/index.lazy').then((d) => d.Route),
)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardTransactionsRouteLazyRoute =
  DashboardTransactionsRouteLazyImport.update({
    id: '/transactions',
    path: '/transactions',
    getParentRoute: () => DashboardRouteRoute,
  } as any).lazy(() =>
    import('./routes/dashboard/transactions/route.lazy').then((d) => d.Route),
  )

const AuthLayoutRegisterRoute = AuthLayoutRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthLayoutRoute,
} as any)

const AuthLayoutLoginRoute = AuthLayoutLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthLayoutRoute,
} as any)

const DashboardSettingsRouteRoute = DashboardSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardOverviewRouteRoute = DashboardOverviewRouteImport.update({
  id: '/overview',
  path: '/overview',
  getParentRoute: () => DashboardRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRoute
    }
    '/_authLayout': {
      id: '/_authLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthLayoutImport
      parentRoute: typeof rootRoute
    }
    '/error-testing': {
      id: '/error-testing'
      path: '/error-testing'
      fullPath: '/error-testing'
      preLoaderRoute: typeof ErrorTestingImport
      parentRoute: typeof rootRoute
    }
    '/onboarding': {
      id: '/onboarding'
      path: '/onboarding'
      fullPath: '/onboarding'
      preLoaderRoute: typeof OnboardingImport
      parentRoute: typeof rootRoute
    }
    '/test-async-error': {
      id: '/test-async-error'
      path: '/test-async-error'
      fullPath: '/test-async-error'
      preLoaderRoute: typeof TestAsyncErrorImport
      parentRoute: typeof rootRoute
    }
    '/test-error': {
      id: '/test-error'
      path: '/test-error'
      fullPath: '/test-error'
      preLoaderRoute: typeof TestErrorImport
      parentRoute: typeof rootRoute
    }
    '/test-loader-error': {
      id: '/test-loader-error'
      path: '/test-loader-error'
      fullPath: '/test-loader-error'
      preLoaderRoute: typeof TestLoaderErrorImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/overview': {
      id: '/dashboard/overview'
      path: '/overview'
      fullPath: '/dashboard/overview'
      preLoaderRoute: typeof DashboardOverviewRouteImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/settings': {
      id: '/dashboard/settings'
      path: '/settings'
      fullPath: '/dashboard/settings'
      preLoaderRoute: typeof DashboardSettingsRouteImport
      parentRoute: typeof DashboardRouteImport
    }
    '/_authLayout/login': {
      id: '/_authLayout/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLayoutLoginImport
      parentRoute: typeof AuthLayoutImport
    }
    '/_authLayout/register': {
      id: '/_authLayout/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof AuthLayoutRegisterImport
      parentRoute: typeof AuthLayoutImport
    }
    '/dashboard/transactions': {
      id: '/dashboard/transactions'
      path: '/transactions'
      fullPath: '/dashboard/transactions'
      preLoaderRoute: typeof DashboardTransactionsRouteLazyImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardRouteImport
    }
    '/test-component/': {
      id: '/test-component/'
      path: '/test-component'
      fullPath: '/test-component'
      preLoaderRoute: typeof TestComponentIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface DashboardRouteRouteChildren {
  DashboardOverviewRouteRoute: typeof DashboardOverviewRouteRoute
  DashboardSettingsRouteRoute: typeof DashboardSettingsRouteRoute
  DashboardTransactionsRouteLazyRoute: typeof DashboardTransactionsRouteLazyRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardOverviewRouteRoute: DashboardOverviewRouteRoute,
  DashboardSettingsRouteRoute: DashboardSettingsRouteRoute,
  DashboardTransactionsRouteLazyRoute: DashboardTransactionsRouteLazyRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

interface AuthLayoutRouteChildren {
  AuthLayoutLoginRoute: typeof AuthLayoutLoginRoute
  AuthLayoutRegisterRoute: typeof AuthLayoutRegisterRoute
}

const AuthLayoutRouteChildren: AuthLayoutRouteChildren = {
  AuthLayoutLoginRoute: AuthLayoutLoginRoute,
  AuthLayoutRegisterRoute: AuthLayoutRegisterRoute,
}

const AuthLayoutRouteWithChildren = AuthLayoutRoute._addFileChildren(
  AuthLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '': typeof AuthLayoutRouteWithChildren
  '/error-testing': typeof ErrorTestingRoute
  '/onboarding': typeof OnboardingRoute
  '/test-async-error': typeof TestAsyncErrorRoute
  '/test-error': typeof TestErrorRoute
  '/test-loader-error': typeof TestLoaderErrorRoute
  '/dashboard/overview': typeof DashboardOverviewRouteRoute
  '/dashboard/settings': typeof DashboardSettingsRouteRoute
  '/login': typeof AuthLayoutLoginRoute
  '/register': typeof AuthLayoutRegisterRoute
  '/dashboard/transactions': typeof DashboardTransactionsRouteLazyRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/test-component': typeof TestComponentIndexLazyRoute
}

export interface FileRoutesByTo {
  '': typeof AuthLayoutRouteWithChildren
  '/error-testing': typeof ErrorTestingRoute
  '/onboarding': typeof OnboardingRoute
  '/test-async-error': typeof TestAsyncErrorRoute
  '/test-error': typeof TestErrorRoute
  '/test-loader-error': typeof TestLoaderErrorRoute
  '/dashboard/overview': typeof DashboardOverviewRouteRoute
  '/dashboard/settings': typeof DashboardSettingsRouteRoute
  '/login': typeof AuthLayoutLoginRoute
  '/register': typeof AuthLayoutRegisterRoute
  '/dashboard/transactions': typeof DashboardTransactionsRouteLazyRoute
  '/dashboard': typeof DashboardIndexRoute
  '/test-component': typeof TestComponentIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/_authLayout': typeof AuthLayoutRouteWithChildren
  '/error-testing': typeof ErrorTestingRoute
  '/onboarding': typeof OnboardingRoute
  '/test-async-error': typeof TestAsyncErrorRoute
  '/test-error': typeof TestErrorRoute
  '/test-loader-error': typeof TestLoaderErrorRoute
  '/dashboard/overview': typeof DashboardOverviewRouteRoute
  '/dashboard/settings': typeof DashboardSettingsRouteRoute
  '/_authLayout/login': typeof AuthLayoutLoginRoute
  '/_authLayout/register': typeof AuthLayoutRegisterRoute
  '/dashboard/transactions': typeof DashboardTransactionsRouteLazyRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/test-component/': typeof TestComponentIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/dashboard'
    | ''
    | '/error-testing'
    | '/onboarding'
    | '/test-async-error'
    | '/test-error'
    | '/test-loader-error'
    | '/dashboard/overview'
    | '/dashboard/settings'
    | '/login'
    | '/register'
    | '/dashboard/transactions'
    | '/dashboard/'
    | '/test-component'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/error-testing'
    | '/onboarding'
    | '/test-async-error'
    | '/test-error'
    | '/test-loader-error'
    | '/dashboard/overview'
    | '/dashboard/settings'
    | '/login'
    | '/register'
    | '/dashboard/transactions'
    | '/dashboard'
    | '/test-component'
  id:
    | '__root__'
    | '/dashboard'
    | '/_authLayout'
    | '/error-testing'
    | '/onboarding'
    | '/test-async-error'
    | '/test-error'
    | '/test-loader-error'
    | '/dashboard/overview'
    | '/dashboard/settings'
    | '/_authLayout/login'
    | '/_authLayout/register'
    | '/dashboard/transactions'
    | '/dashboard/'
    | '/test-component/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  AuthLayoutRoute: typeof AuthLayoutRouteWithChildren
  ErrorTestingRoute: typeof ErrorTestingRoute
  OnboardingRoute: typeof OnboardingRoute
  TestAsyncErrorRoute: typeof TestAsyncErrorRoute
  TestErrorRoute: typeof TestErrorRoute
  TestLoaderErrorRoute: typeof TestLoaderErrorRoute
  TestComponentIndexLazyRoute: typeof TestComponentIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  AuthLayoutRoute: AuthLayoutRouteWithChildren,
  ErrorTestingRoute: ErrorTestingRoute,
  OnboardingRoute: OnboardingRoute,
  TestAsyncErrorRoute: TestAsyncErrorRoute,
  TestErrorRoute: TestErrorRoute,
  TestLoaderErrorRoute: TestLoaderErrorRoute,
  TestComponentIndexLazyRoute: TestComponentIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/dashboard",
        "/_authLayout",
        "/error-testing",
        "/onboarding",
        "/test-async-error",
        "/test-error",
        "/test-loader-error",
        "/test-component/"
      ]
    },
    "/dashboard": {
      "filePath": "dashboard/route.tsx",
      "children": [
        "/dashboard/overview",
        "/dashboard/settings",
        "/dashboard/transactions",
        "/dashboard/"
      ]
    },
    "/_authLayout": {
      "filePath": "_authLayout.tsx",
      "children": [
        "/_authLayout/login",
        "/_authLayout/register"
      ]
    },
    "/error-testing": {
      "filePath": "error-testing.tsx"
    },
    "/onboarding": {
      "filePath": "onboarding.tsx"
    },
    "/test-async-error": {
      "filePath": "test-async-error.tsx"
    },
    "/test-error": {
      "filePath": "test-error.tsx"
    },
    "/test-loader-error": {
      "filePath": "test-loader-error.tsx"
    },
    "/dashboard/overview": {
      "filePath": "dashboard/overview/route.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/settings": {
      "filePath": "dashboard/settings/route.tsx",
      "parent": "/dashboard"
    },
    "/_authLayout/login": {
      "filePath": "_authLayout/login.tsx",
      "parent": "/_authLayout"
    },
    "/_authLayout/register": {
      "filePath": "_authLayout/register.tsx",
      "parent": "/_authLayout"
    },
    "/dashboard/transactions": {
      "filePath": "dashboard/transactions/route.lazy.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx",
      "parent": "/dashboard"
    },
    "/test-component/": {
      "filePath": "test-component/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
